# .github/workflows/build-openwrt-ipk-repo.yaml
# 绝对靠谱版本：完整自动化 OpenWrt IPK 仓库生成
# 作者：基于 OpenWrt 官方脚本和 GitHub Actions 最佳实践
# 功能标注：
# 1. 触发机制：推送 IPK 文件或手动触发（workflow_dispatch，支持输入参数如目标目录）。
# 2. 工具安装：安装 gzip、ar、tar、usign（签名用），确保环境就绪。
# 3. 元数据提取：从每个 IPK 的 control 文件精确解析字段（Package, Version, Depends 等），处理多行 Description。
# 4. 索引生成：创建标准 OpenWrt Packages 文件（包含 MD5Sum、SHA256sum 等必需校验），压缩为 Packages.gz。
# 5. 签名支持：使用 usign 私钥签名 Packages 生成 Packages.sig（防篡改，opkg 默认检查）。
# 6. 提交更新：自动 git add/commit/push 生成的文件到 main 分支，使用 [skip ci] 避免循环触发。
# 7. 手动输入扩展：支持指定处理目录，方便调试单个架构。
# 8. 错误鲁棒：跳过无效 IPK、清理临时文件、默认值 fallback。
# 9. 可扩展：易添加 GitHub Pages 部署（注释部分），或切换到 ipkg-make-index.sh 官方脚本。
# 使用前提：仓库结构如 ipks/<architecture>/*.ipk；添加 USIGN_KEY Secret（base64 私钥）；上传公钥到 keys/。

name: Build OpenWrt IPK Repository

on:
  push:
    branches:
      - main
    paths:
      - '**/*.ipk'  # 功能1：仅 IPK 变化时自动触发
  workflow_dispatch:  # 功能1：手动触发，支持网页/CLI/API
    inputs:
      target_dir:
        description: 'Target directory to process (e.g., ipks/aarch64_cortex-a53; default: all)'
        required: false
        default: 'all'

jobs:
  generate-index:
    runs-on: ubuntu-latest
    env:
      USIGN_KEY: ${{ secrets.USIGN_KEY }}  # 功能5：私钥从 Secrets 加载（base64 编码）

    steps:
      - name: Checkout repository  # 功能：拉取仓库代码，包括 IPK 文件
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # 需要 token 以 push 更新

      - name: Install required tools  # 功能2：安装提取/压缩/签名工具
        run: |
          sudo apt-get update
          sudo apt-get install -y gzip ar tar usign  # usign for signing

      - name: Generate Packages, Packages.gz, and Packages.sig  # 功能3&4&5：核心生成逻辑
        run: |
          # 处理目录逻辑（支持手动输入）
          if [ "${{ inputs.target_dir }}" != "all" ] && [ ! -z "${{ inputs.target_dir }}" ]; then
            DIRS="${{ inputs.target_dir }}"
          else
            DIRS=$(find . -type f -name "*.ipk" -exec dirname {} \; | sort -u)
          fi

          for dir in $DIRS; do
            [ -d "$dir" ] || continue
            echo "Processing directory: $dir"
            cd "$dir"

            > Packages  # 初始化 Packages 文件

            for ipk in *.ipk; do
              [ -f "$ipk" ] || continue

              # 提取 control.tar.gz 从 IPK（ar 格式）
              ar x "$ipk" control.tar.gz || continue
              tar xzf control.tar.gz ./control || continue
              rm -f control.tar.gz debian-binary data.tar.*  # 清理临时文件（功能8）

              # 解析字段（用 awk 鲁棒处理空格）
              package_name=$(awk '/^Package:/ {print substr($0, 10)}' ./control || echo "unknown")
              version=$(awk '/^Version:/ {print substr($0, 10)}' ./control || echo "0")
              architecture=$(awk '/^Architecture:/ {print substr($0, 14)}' ./control || echo "all")
              depends=$(awk '/^Depends:/ {print substr($0, 10)}' ./control || echo "")
              maintainer=$(awk '/^Maintainer:/ {print substr($0, 13)}' ./control || echo "github_actions")
              installed_size=$(awk '/^Installed-Size:/ {print substr($0, 17)}' ./control || echo "0")
              
              # 多行 Description 处理
              description=$(awk '/^Description:/ {flag=1; sub(/^Description: ?/, ""); gsub(/^\s+/, ""); print; next} flag && /^ /{gsub(/^\s+/, ""); print; next} flag && !/^ /{flag=0}' ./control | paste -sd ' ' - || echo "No description")

              # 校验和与大小（opkg 必需）
              md5sum=$(md5sum "$ipk" | awk '{print $1}')
              sha256sum=$(sha256sum "$ipk" | awk '{print $1}')
              size=$(stat -c%s "$ipk")

              # 追加标准条目
              cat << EOF >> Packages
Package: $package_name
Version: $version
Depends: $depends
Architecture: $architecture
Maintainer: $maintainer
Section: utils  # 可自定义，如 net/admin
Priority: optional
Installed-Size: $installed_size
Filename: $ipk
Size: $size
MD5Sum: $md5sum
SHA256sum: $sha256sum
Description: $description

EOF

              rm -f ./control
            done

            # 压缩（功能4）
            gzip -9c Packages > Packages.gz

            # 签名（功能5，如果有密钥）
            if [ ! -z "$USIGN_KEY" ]; then
              echo "$USIGN_KEY" | base64 -d > temp.key
              # 假设公钥在仓库 keys/your.pub（需手动上传）
              usign -S -m Packages -s temp.key
              rm temp.key
            fi

            cd - > /dev/null
          done

      - name: Commit and push updates  # 功能6：自动提交，避免手动
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # 精确添加生成文件
          git add $(find . \( -name "Packages" -o -name "Packages.gz" -o -name "Packages.sig" \) | tr '\n' ' ')
          git commit -m "Auto update IPK index [skip ci]" || echo "No changes to commit"
          git push origin main || echo "No push needed"

      # - name: Deploy to GitHub Pages  # 功能9：可选，部署为静态源（取消注释启用）
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./ipks  # 假设 IPK 在 ipks/，调整路径
      #     publish_branch: gh-pages
      #     force_orphan: true  # 创建干净分支
