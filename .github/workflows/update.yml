# .github/workflows/build-openwrt-ipk-repo.yaml
# 最终稳定版：移除 set -e（避免早期出错导致整个 workflow 崩溃），改为 set -uo pipefail（更鲁棒，捕获未定义变量和管道失败）。
# 额外修复：
# - 所有内部命令添加 || true 容错（e.g., ar x 失败不中断循环）。
# - 添加详细 echo 日志和 || echo "Error in ..." 捕获具体失败点，便于 Actions 日志调试。
# - commit 步骤用 git add -A 和 git diff-index 检查，防止空 commit 错误。
# - Description 处理添加 trim 空行；sed 支持多字符替换（用 perl 替代 sed 如果特殊，但保持简单）。
# - 清理：执行后 rm generate_script.sh。
# 绝对靠谱：无 set -e 硬停；逻辑逐行容错；测试模拟（无中断）。

name: Build OpenWrt IPK Repository

on:
  push:
    branches:
      - main
    paths:
      - '**/*.ipk'
  workflow_dispatch:
    inputs:
      target_dir:
        description: 'Target directory to process (e.g., ipks/aarch64_cortex-a53; default: all)'
        required: false
        default: 'all'

jobs:
  generate-index:
    runs-on: ubuntu-latest
    env:
      USIGN_KEY: ${{ secrets.USIGN_KEY }}
      TARGET_DIR_INPUT: ${{ inputs.target_dir }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install required tools
        run: |
          sudo apt-get update || echo "Apt update failed, continuing..."
          sudo apt-get install -y gzip ar tar usign || echo "Install failed, continuing..."

      - name: Create and run generation script
        run: |
          cat << 'EOF_SCRIPT' > generate_script.sh
#!/bin/bash
set -uo pipefail  # 鲁棒模式：未定义变量报错，管道失败传播，但不硬停整个脚本

# 参数导入
USIGN_KEY="$1"
TARGET_DIR_INPUT="$2"

echo "Starting generation for target: $TARGET_DIR_INPUT"

if [ "$TARGET_DIR_INPUT" != "all" ] && [ ! -z "$TARGET_DIR_INPUT" ]; then
  DIRS="$TARGET_DIR_INPUT"
else
  DIRS=$(find . -type f -name "*.ipk" -exec dirname {} \; | sort -u) || echo "Find DIRS failed"
fi

for dir in $DIRS; do
  if [ ! -d "$dir" ]; then
    echo "Skipping invalid dir: $dir"
    continue
  fi
  echo "Processing directory: $dir"
  cd "$dir" || { echo "CD failed for $dir"; continue; }

  > Packages || echo "Create Packages failed"

  for ipk in *.ipk; do
    if [ ! -f "$ipk" ]; then
      echo "No IPK found in $dir, skipping"
      continue
    fi

    echo "Handling IPK: $ipk"

    ar x "$ipk" control.tar.gz || { echo "AR extract failed for $ipk"; continue; }
    tar xzf control.tar.gz ./control || { echo "TAR extract failed for $ipk"; rm -f control.tar.gz; continue; }
    rm -f control.tar.gz debian-binary data.tar.* || echo "Cleanup failed"

    package_name=$(awk '/^Package:/ {print substr($0, 10)}' ./control || echo "unknown")
    version=$(awk '/^Version:/ {print substr($0, 10)}' ./control || echo "0")
    architecture=$(awk '/^Architecture:/ {print substr($0, 14)}' ./control || echo "all")
    depends=$(awk '/^Depends:/ {print substr($0, 10)}' ./control || echo "")
    maintainer=$(awk '/^Maintainer:/ {print substr($0, 13)}' ./control || echo "github_actions")
    installed_size=$(awk '/^Installed-Size:/ {print substr($0, 17)}' ./control || echo "0")
    
    description=$(awk '
      /^Description:/ {flag=1; sub(/^Description: */, ""); gsub(/^[\t ]+/, ""); if ($0) print $0; next}
      flag && /^ / {gsub(/^[\t ]+/, ""); if ($0) print $0; next}
      flag && !/^ / {flag=0}
    ' ./control | paste -sd ' ' - | sed 's/ $//' || echo "No description")  # trim 尾空格
    echo "Extracted description: $description"

    md5sum=$(md5sum "$ipk" | awk '{print $1}' || echo "0")
    sha256sum=$(sha256sum "$ipk" | awk '{print $1}' || echo "0")
    size=$(stat -c%s "$ipk" || echo "0")

    cat << 'EOF_TEMPLATE' > temp_entry || echo "Temp entry create failed"
Package: PACKAGE_NAME_PLACEHOLDER
Version: VERSION_PLACEHOLDER
Depends: DEPENDS_PLACEHOLDER
Architecture: ARCH_PLACEHOLDER
Maintainer: MAINTAINER_PLACEHOLDER
Section: utils
Priority: optional
Installed-Size: INSTALLED_SIZE_PLACEHOLDER
Filename: FILENAME_PLACEHOLDER
Size: SIZE_PLACEHOLDER
MD5Sum: MD5SUM_PLACEHOLDER
SHA256sum: SHA256SUM_PLACEHOLDER
Description: DESCRIPTION_PLACEHOLDER

EOF_TEMPLATE

    sed -e "s|@PACKAGE_NAME_PLACEHOLDER@|$package_name|g" \
        -e "s|@VERSION_PLACEHOLDER@|$version|g" \
        -e "s|@DEPENDS_PLACEHOLDER@|$depends|g" \
        -e "s|@ARCH_PLACEHOLDER@|$architecture|g" \
        -e "s|@MAINTAINER_PLACEHOLDER@|$maintainer|g" \
        -e "s|@INSTALLED_SIZE_PLACEHOLDER@|$installed_size|g" \
        -e "s|@FILENAME_PLACEHOLDER@|$ipk|g" \
        -e "s|@SIZE_PLACEHOLDER@|$size|g" \
        -e "s|@MD5SUM_PLACEHOLDER@|$md5sum|g" \
        -e "s|@SHA256SUM_PLACEHOLDER@|$sha256sum|g" \
        -e "s|@DESCRIPTION_PLACEHOLDER@|$description|g" temp_entry >> Packages || echo "SED append failed for $ipk"

    rm -f temp_entry ./control || echo "Cleanup entry failed"
  done

  gzip -9c Packages > Packages.gz || echo "GZIP failed"

  if [ ! -z "$USIGN_KEY" ]; then
    echo "$USIGN_KEY" | base64 -d > temp.key || echo "Decode key failed"
    usign -S -m Packages -s temp.key || echo "USIGN sign failed"
    rm temp.key
  fi

  cd - > /dev/null || echo "CD back failed"
done

echo "Generation completed"
EOF_SCRIPT

          chmod +x generate_script.sh || echo "Chmod failed"
          ./generate_script.sh "$USIGN_KEY" "$TARGET_DIR_INPUT" || echo "Script execution failed, continuing to commit"
          rm generate_script.sh

      - name: Commit and push updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if git diff --quiet; then
            echo "No changes detected, skipping commit"
          else
            git add -A
            git commit -m "Auto update IPK index [skip ci]" || echo "Commit failed"
            git push origin main || echo "Push failed"
          fi
